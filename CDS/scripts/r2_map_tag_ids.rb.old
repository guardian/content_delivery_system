#!/usr/bin/env ruby

#r2_map_tag_ids $Rev$ $LastChangedDate$

#This CDS method maps from a set of R2 numeric tag IDs to their names or vice-versa,
#using Composer's tags api.
#Arguments:
#  <input>tag1|tag2|{meta:tagfield}|.... - map these tags
#  <input_key>keyname - map tag values from this key only. If <input> is specified as well, then <input> takes precedence
#  <output_key>keyname - output mapping result to this datastore key
#  <case_sensitive/> - when checking if the internal/external name actually matches, do the check case-sensitive
#
#END DOC

require 'CDS/Datastore'
require 'net/http'
require 'json'
require 'cgi'
require 'awesome_print'

#Configurable settings
$baseUrl = 'http://tag.guardianapis.com/tags'
#End configurable settings

$store = Datastore.new('r2_map_tag_ids')

class HTTPError < StandardError
attr_accessor :request
attr_accessor :response
attr_accessor :message

def initialize(msg,request=nil,response=nil)
	@message=msg
	@request=request
	@response=response
end #def initialize

end #class HTTPError

class NoMatchError < StandardError
end #class NoMatchError

class TagData
attr_accessor :id		#int
attr_accessor :type		#string
attr_accessor :internal_name	#string
attr_accessor :external_name	#string
attr_accessor :slug		#string
attr_accessor :section	#hash
attr_accessor :uri		#URI

def initialize(parsed_data)
	@uri = URI(parsed_data['uri'])
	@id = parsed_data['data']['id']
	@type = parsed_data['data']['type']
	@internal_name = parsed_data['data']['internalName']
	@external_name = parsed_data['data']['externalName']
	@slug = parsed_data['data']['slug']
	@section = parsed_data['data']['section']
	@parents = parsed_data['parents']	#Array
	@external_refs = parsed_data['externalReferences']	#Array
end #def initialize

def eachExternalRef(&b)
	@external_refs.each do |r|
		b.call(r)
	end
end #def eachExternalRef

end #class tagData

class TagSet
attr_accessor :offset
attr_accessor :pageLimit
attr_accessor :total

include Enumerable

def initialize(parsed_data)
	@offset=parsed_data['offset']
	@pageLimit=parsed_data['limit']
	@total=parsed_data['total']
	@tags = []
	if(parsed_data['data'].length < @total)
		@isComplete=false
	else
		@isComplete=true
	end
	
	parsed_data['data'].each do |info|
		@tags << TagData.new(info)
	end
	
end #def initialize
	
def complete?
	return @isComplete
end

def each(&b)
	@tags.each do |t|
		b.call(t)
	end
end

end #class tagSet

def lookup_name(name,type: nil)
	params = {
		:limit=>10,
		:type=>"keyword,tone,series,blog,type"
	}
	if(type)
		params[:type]=type
	end #if(type)
	params[:query]=name
	
	#paramString=""
	#params.each do |k,v|
	#	paramString+="#{cgi.escape(k)}=#{cgi.escape(v)}&"
	#end #params.each
	
	#paramString.chop!
	
	uri = URI($baseUrl)
	uri.query = URI.encode_www_form(params)
	
	ap uri
	res = Net::HTTP.get_response(uri)
	if(res.is_a?(Net::HTTPSuccess))
		return TagSet.new(JSON.parse(res.body))
	end
	raise HTTPError("An HTTP error occurred",nil,res)
	
end #def lookup_name

def check_tag(tagname, inSection: nil)
tagset = lookup_name(tagname)

puts "INFO: Potential tag matches for #{tagname}"
relevantTag = tagset.find { |tag|
	puts "Checking #{tag.slug} in #{tag.section['pathPrefix']} for #{inSection}/#{tagname}"
	#ap tag
	if(inSection and tag.section['pathPrefix'] != inSection)
		next
	end
	if(tag.slug.downcase == tagname.downcase)
		true
	end
	
	if(tag.internal_name.downcase == tagname.downcase)
		true
	end
	if(tag.external_name.downcase == tagname.downcase)
		true
	end
} #tagset.find

if(relevantTag==nil)
	raise NoMatchError, "-ERROR: Unable to find a matching tag for #{tagname}"
end

return relevantTag.id
end #def check_tag

#START MAIN
input_data=""
if(ENV['input_key'])
	input_data=$store.get('meta',ENV['input_key'])
end
if(ENV['input'])
	input_data=$store.substitute_string(ENV['input'])
end

returned_ids = []
input_data.split(/\|/).each do |tagname|
	begin
		split_parts = tagname.split('/')
		if(split_parts)
			returned_ids << check_tag(split_parts[1].gsub(/-/,' '),inSection: split_parts[0]) #,type: split_parts[1])
		else
			returned_ids << check_tag(tagname)
		end
	rescue Exception=>e
		puts e.message
		puts e.backtrace
	end
	puts "-------------------------------------------"
end

ap returned_ids
